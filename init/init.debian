#! /bin/sh
### BEGIN INIT INFO
# Provides:          feedeobot
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Feedeobot
# Description:       Feedeobot.
### END INIT INFO

# Author: Hugo Freire <hugo.freire@feedeo.com>

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/local/bin
DESC="Feedeobot"
NAME=feedeobot

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

DAEMON=$FEEDEOBOT_HOME/bin/$NAME
DAEMON_ARGS=" 2>&1 > $FEEDEOBOT_HOME/tmp/feedeobot.log"
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

export AUDIODEV=hw:0,0
export AUDIODRIVER=alsa

forever=`which forever`
nodemon=`which nodemon`

do_start()
{
    cd $FEEDEOBOT_HOME

    mkdir log > /dev/null 2>&1
    mkdir db > /dev/null 2>&1
    mkdir tmp > /dev/null 2>&1

    $forever start \
    --append -l $FEEDEOBOT_HOME/log/feedeobot.log \
    --pidFile $PIDFILE \
    --workingDir $FEEDEOBOT_HOME \
    -c "$nodemon --exitcrash" $FEEDEOBOT_HOME/bin/feedeobot
    RETVAL="$?"

    return "$RETVAL"
}

do_stop()
{
    $forever stopall
    RETVAL="$?"

    killall node > /dev/null 2>&1

    rm -f $PIDFILE

    return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
    #
    # If the daemon can reload its configuration without
    # restarting (for example, when it is sent a SIGHUP),
    # then implement that here.
    #
    git=`which git`

    cd $FEEDEOBOT_HOME

    $git remote update > /dev/null 2>&1 && \
    $git status -uno | \
    grep -q "Your branch is behind" && \
    $git reset --hard origin/master
    RETVAL="$?"

    return "$RETVAL"
}

case "$1" in
  start)
    [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
    do_start
    case "$?" in
        0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
        2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  stop)
    [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
    do_stop
    case "$?" in
        0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
        2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  reload)
    [ "$VERBOSE" != no ] && log_daemon_msg "Reloading $DESC" "$NAME"
    do_reload
    RETVAL="$?"
    case $RETVAL in
        0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
        2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    return $RETVAL
    ;;
  status)
    status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
    ;;
  #reload|force-reload)
    #
    # If do_reload() is not implemented then leave this commented out
    # and leave 'force-reload' as an alias for 'restart'.
    #
    #log_daemon_msg "Reloading $DESC" "$NAME"
    #do_reload
    #log_end_msg $?
    #;;
  restart|force-reload)
    #
    # If the "reload" option is implemented then remove the
    # 'force-reload' alias
    #
    log_daemon_msg "Restarting $DESC" "$NAME"
    do_stop
    case "$?" in
      0|1)
        do_start
        case "$?" in
            0) log_end_msg 0 ;;
            1) log_end_msg 1 ;; # Old process is still running
            *) log_end_msg 1 ;; # Failed to start
        esac
        ;;
      *)
        # Failed to stop
        log_end_msg 1
        ;;
    esac
    ;;
  *)
    #echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
    echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
    exit 3
    ;;
esac

:
